{"version":3,"file":"databasecommunicator.min.js","sources":["../src/databasecommunicator.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n    return {\n        init: function(params) {\n            const grid = document.getElementById('rating-grid');\n            const plusBtn = document.getElementById('plusBtn');\n            const popup = document.getElementById('rating-popup');\n            const dateInput = document.getElementById('rating-date');\n            const valueInput = document.getElementById('rating-value');\n            const saveBtn = document.getElementById('rating-save');\n            const pageurl = window.location.pathname + window.location.search;\n\n            let editingDiv = null; // null when adding new, non-null when editing\n\n            function openPopup(x, y, rating = '', date = '') {\n                popup.style.position = 'absolute';\n                popup.style.left = `${x}px`;\n                popup.style.top = `${y}px`;\n                popup.style.display = 'block';\n                valueInput.value = rating;\n                dateInput.value = date;\n            }\n\n            function createRatingSquare(rating, date, uniqueKey) {\n                const div = document.createElement('div');\n                div.className = `rating-square bg-rating-${rating}`;\n                div.textContent = rating;\n                div.title = `Date: ${date}`;\n                div.dataset.rating = rating;\n                div.dataset.date = date;\n                div.dataset.key = uniqueKey;\n\n                div.addEventListener('click', function(e) {\n                    editingDiv = div;\n                    const rect = div.getBoundingClientRect();\n                    const containerRect = grid.getBoundingClientRect();\n                    const x = rect.left - containerRect.left + grid.scrollLeft;\n                    const y = rect.top - containerRect.top + 45;\n                    openPopup(x, y, rating, date);\n                    e.stopPropagation();\n                });\n\n                return div;\n            }\n\n            // === Show popup when clicking plus button ===\n            plusBtn?.addEventListener('click', (e) => {\n                editingDiv = null;\n                const rect = plusBtn.getBoundingClientRect();\n                const containerRect = grid.getBoundingClientRect();\n                const x = rect.left - containerRect.left + grid.scrollLeft;\n                const y = rect.top - containerRect.top + 45;\n                const today = new Date().toISOString().split('T')[0];\n                openPopup(x, y, '', today);\n                e.stopPropagation();\n            });\n\n            function saveData () {\n                const rating = parseInt(valueInput.value);\n                const date = dateInput.value;\n                const timestamp = Math.floor(new Date(date).getTime() / 1000);\n                const ratingKey = editingDiv?.dataset?.key || null;\n\n                if (isNaN(rating) || rating < 0 || rating > 5) {\n                    alert(\"Please enter a rating between 0 and 5\");\n                    return;\n                }\n\n                var temppageurl = pageurl;\n                if (pageurl.includes(\"book\") && !pageurl.includes(\"chapterid\")) {\n                    temppageurl += `&chapterid=${params.chapterid}`;\n                }\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_save_rating',\n                    args: {\n                        courseid: params.courseid,\n                        pageid: params.pageid,\n                        ratingvalue: rating,\n                        ratingdate: timestamp,\n                        pageurl: temppageurl,\n                        pagetitle: params.pagetitle,\n                        chapterid: params.chapterid || null,\n                        ratingkey: ratingKey // used to identify old entry if editing\n                    },\n                    done: function(response) {\n                        // If editing, update the existing div\n                        if (editingDiv) {\n                            editingDiv.className = `rating-square bg-rating-${rating}`;\n                            editingDiv.textContent = rating;\n                            editingDiv.title = `Date: ${date}`;\n                            editingDiv.dataset.rating = rating;\n                            editingDiv.dataset.date = date;\n                        } else {\n                            // Otherwise create new div\n                            const div = createRatingSquare(rating, date, response.ratingkey);\n                            grid.insertBefore(div, plusBtn);\n                        }\n                        popup.style.display = 'none';\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n\n\n            // === Save (create or update) rating ===\n            saveBtn?.addEventListener('click', saveData);\n\n            // === Hide popup if clicking outside ===\n            document.addEventListener('click', (e) => {\n                if (!popup.contains(e.target) && e.target !== plusBtn) {\n                    popup.style.display = 'none';\n                }\n            });\n\n            function loadExistingData() {\n                // === Load existing ratings from server ===\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_get_ratings',\n                    args: {\n                        courseid: params.courseid,\n                        pageid: params.pageid,\n                        chapterid: params.chapterid || null\n                    },\n                    done: function(ratings) {\n                        ratings.forEach(r => {\n                            const d = new Date(r.ratingdate * 1000);\n                            const dateStr = d.toISOString().split('T')[0];\n                            const div = createRatingSquare(r.ratingvalue, dateStr, r.ratingkey);\n                            grid.insertBefore(div, plusBtn);\n                        });\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n            function saveNextReviewDate() {\n                var date = $('#nextReview').val();\n                if (!date) { date = ''; }\n\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_save_nextreview',\n                    args: {\n                        pageid: params.pageid,\n                        courseid: params.courseid,\n                        nextreview: date,\n                        pageurl: pageurl,                        \n                        chapterid: params.chapterid || null\n                    },\n                    done: function(response) {\n                        console.log('next review date tweaked:', response.status);\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n            loadExistingData();\n\n            $('#nextReview').on('input change', saveNextReviewDate);\n\n            function loadExistingReviewDate() {\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_get_nextreview',\n                    args: {\n                        pageid: params.pageid,\n                        courseid: params.courseid,\n                        chapterid: params.chapterid || null\n                    },\n                    done: function(data) {\n                        if (data.nextreview) {\n                            $('#nextReview').val(data.nextreview);\n                        }\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n            loadExistingReviewDate();\n            \n        }\n    };\n});\n"],"names":["define","$","Ajax","Notification","init","params","grid","document","getElementById","plusBtn","popup","dateInput","valueInput","saveBtn","pageurl","window","location","pathname","search","editingDiv","openPopup","x","y","rating","date","style","position","left","top","display","value","createRatingSquare","uniqueKey","div","createElement","className","textContent","title","dataset","key","addEventListener","e","rect","getBoundingClientRect","containerRect","scrollLeft","stopPropagation","Date","toISOString","split","parseInt","timestamp","Math","floor","getTime","ratingKey","isNaN","alert","temppageurl","includes","chapterid","call","methodname","args","courseid","pageid","ratingvalue","ratingdate","pagetitle","ratingkey","done","response","insertBefore","fail","exception","contains","target","ratings","forEach","r","dateStr","on","val","nextreview","console","log","status","data"],"mappings":"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"}